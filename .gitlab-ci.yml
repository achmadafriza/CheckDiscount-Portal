# services:
#   - postgres:latest

stages:
  - test
  - deploy

test:
  image: python:latest
  stage: test
  # this configures Django application to use attached postgres database that is run on `postgres` host
  # variables:
  #   DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/$POSTGRES_DB"
  before_script:
  - wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
  - echo "deb http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google.list
  - pip install -r requirements.txt
  - python manage.py makemigrations
  - python manage.py migrate
  - apt-get update -qq && apt-get install -y -qq unzip
  - apt-get install -y google-chrome-stable
  - apt-get install -y xvfb
  - wget https://chromedriver.storage.googleapis.com/2.43/chromedriver_linux64.zip
  - unzip chromedriver_linux64.zip
  - python manage.py collectstatic --no-input
  - python manage.py runserver 8000 &
  script:
  # - apt-get update -qy
  # - apt-get install -y python-dev python-pip
  # - pip install -r requirements.txt
  - python manage.py test
  # - coverage run --source='.' manage.py test
  # - coverage report

Deployment:
  image: ruby:2.4
  stage: deploy
  before_script:
    - gem install dpl
    - wget -qO- https://cli-assets.heroku.com/install-ubuntu.sh | sh
  script:
    - dpl --provider=heroku --app=$HEROKU_APPNAME --api-key=$HEROKU_APIKEY
    - export HEROKU_API_KEY=$HEROKU_APIKEY
  environment:
    name: production
    url: $HEROKU_APP_HOST
  when: on_success
  only:
    - master
